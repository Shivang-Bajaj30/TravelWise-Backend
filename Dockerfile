# Stage 1: Build the application
FROM maven:3.9.6-eclipse-temurin-17 AS build # Use a Maven image with your desired JDK version

WORKDIR /app

# Copy the Maven wrapper and pom.xml first to leverage Docker cache
COPY mvnw .
COPY .mvn .mvn
COPY pom.xml .

# Download dependencies (only if pom.xml changes, very efficient caching)
RUN mvn dependency:go-offline

# Copy the rest of the source code
COPY src ./src

# Build the JAR file
RUN mvn clean package -DskipTests

# Stage 2: Create the final lightweight image
FROM eclipse-temurin:17-jre-alpine # Use a smaller JRE image for the final artifact

WORKDIR /app

# Copy the JAR file from the build stage
# Assuming your JAR is in target/your-app-name-0.0.1-SNAPSHOT.jar
# Adjust the name as per your actual JAR file generated by Maven/Gradle
COPY --from=build /app/target/*.jar app.jar

# Expose the port your Spring Boot application listens on (default is 8080)
EXPOSE 8080

# Define the command to run your Spring Boot application
ENTRYPOINT ["java", "-jar", "app.jar"]

# Optional: Set Spring profile for Render if needed (e.g., for different application.properties)
# CMD ["java", "-Dspring.profiles.active=render", "-jar", "app.jar"]